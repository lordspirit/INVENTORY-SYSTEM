#CREATE DATABASE
CREATE DATABASE `INVENTORY_MANAGEMENT`;

#BEGIN TABLE CREATION

#CREATE TABLE STATUS
CREATE TABLE `STATUS`
	(
	`STATUS_ID` INT NOT NULL AUTO_INCREMENT,
	`NAME_STATUS` VARCHAR(100) DEFAULT NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT `PK_STATUS` PRIMARY KEY (`STATUS_ID`),
	CONSTRAINT `UC_STATUS` UNIQUE (`NAME_STATUS`)
	);

#CREATE TABLE USER_TYPE
CREATE TABLE `USER_TYPE`
	(
	`USER_TYPE_ID` INT NOT NULL AUTO_INCREMENT,
	`NAME_USER_TYPE` VARCHAR(50) NOT NULL,
	`STATUS_ID` INT NOT NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT `PK_USER_TYPE` PRIMARY KEY (`USER_TYPE_ID`),
	CONSTRAINT `UC_USER_TYPE` UNIQUE (`NAME_USER_TYPE`),
	CONSTRAINT `FK3_USER_TYPE` FOREIGN KEY (`STATUS_ID`) REFERENCES `STATUS`(`STATUS_ID`)
	);

#CREATE TABLE USER
CREATE TABLE `USER`
	(
	`USER_ID` INT NOT NULL AUTO_INCREMENT,
	`USER_EMAIL` VARCHAR(70) NOT NULL,
	`USER_PASSWORD` VARCHAR(100) NOT NULL,
	`NAME_USER` VARCHAR(50) NOT NULL,
	`USER_TYPE_ID` INT NOT NULL,
	`STATUS_ID` INT NOT NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT `PK_USER` PRIMARY KEY (`USER_ID`),
	CONSTRAINT `UC_USER_EMAIL` UNIQUE (`USER_EMAIL`),
	CONSTRAINT `FK3_USER` FOREIGN KEY (`STATUS_ID`) REFERENCES `STATUS`(`STATUS_ID`),
	CONSTRAINT `FK4_USER` FOREIGN KEY (`USER_TYPE_ID`) REFERENCES `USER_TYPE`(`USER_TYPE_ID`),
	CONSTRAINT `CHK1_USER` CHECK (`USER_EMAIL` LIKE '%@%.%')
	);

#CREATE TABLE
CREATE TABLE `LABEL`
	(
	`LABEL_ID` INT NOT NULL AUTO_INCREMENT,
	`NAME_LABEL` VARCHAR(100) NOT NULL,
	`STATUS_ID` INT NOT NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT `PK_LABEL` PRIMARY KEY (`LABEL_ID`),
	CONSTRAINT `UC_LABEL` UNIQUE (`NAME_LABEL`),
	CONSTRAINT `FK1_LABEL` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK2_LABEL` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK3_LABEL` FOREIGN KEY (`STATUS_ID`) REFERENCES `STATUS`(`STATUS_ID`)
	);

#CREATE TABLE LOCATION_TYPE
CREATE TABLE `LOCATION_TYPE`
	(
	`LOCATION_TYPE_ID` INT NOT NULL AUTO_INCREMENT,
	`NAME_LOCATION_TYPE` VARCHAR(100) NOT NULL,
	`STATUS_ID` INT NOT NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT `PK_LOCATION_TYPE` PRIMARY KEY (`LOCATION_TYPE_ID`),
	CONSTRAINT `UC_LOCATION_TYPE` UNIQUE (`NAME_LOCATION_TYPE`),
	CONSTRAINT `FK1_LOCATION_TYPE` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK2_LOCATION_TYPE` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK3_LOCATION_TYPE` FOREIGN KEY (`STATUS_ID`) REFERENCES `STATUS`(`STATUS_ID`)
	);

#CREATE TABLE LOCATION
CREATE TABLE `LOCATION`
	(
	`LOCATION_ID` INT NOT NULL AUTO_INCREMENT,
	`LOCATION_TYPE_ID` INT NOT NULL,
	`NAME_LOCATION` VARCHAR(100) NOT NULL,
	`STATUS_ID` INT NOT NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT `PK_LOCATION` PRIMARY KEY (`LOCATION_ID`),
	CONSTRAINT `UC_LOCATION` UNIQUE (`NAME_LOCATION`),
	CONSTRAINT `FK1_LOCATION` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK2_LOCATION` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK3_LOCATION` FOREIGN KEY (`LOCATION_TYPE_ID`) REFERENCES `LOCATION_TYPE`(`LOCATION_TYPE_ID`),
	CONSTRAINT `FK4_LOCATION` FOREIGN KEY (`STATUS_ID`) REFERENCES `STATUS`(`STATUS_ID`)
	);

#CREATE TABLE LOCATION_HIERARCHY
CREATE TABLE `LOCATION_HIERARCHY`
	(
	`LOCATION_HIERARCHY_ID` INT NOT NULL AUTO_INCREMENT,
	`PARENT_LOCATION_ID` INT NOT NULL,
	`CHILD_LOCATION_ID` INT NOT NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT `PK_LOCATION_HIERARCHY` PRIMARY KEY (`LOCATION_HIERARCHY_ID`),
	CONSTRAINT `UC_LOCATION_HIERARCHY` UNIQUE (`PARENT_LOCATION_ID`, `CHILD_LOCATION_ID`),
	CONSTRAINT `FK1_LOCATION_HIERARCHY` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK2_LOCATION_HIERARCHY` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK3_LOCATION_HIERARCHY` FOREIGN KEY (`PARENT_LOCATION_ID`) REFERENCES `LOCATION`(`LOCATION_ID`),
	CONSTRAINT `FK4_LOCATION_HIERARCHY` FOREIGN KEY (`CHILD_LOCATION_ID`) REFERENCES `LOCATION`(`LOCATION_ID`)
	);

#CREATE TABLE CATEGORY
CREATE TABLE `CATEGORY`
	(
	`CATEGORY_ID` INT NOT NULL AUTO_INCREMENT,
	`NAME_CATEGORY` VARCHAR(100) NOT NULL,
	`STATUS_ID` INT NOT NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT `PK_CATEGORY` PRIMARY KEY (`CATEGORY_ID`),
	CONSTRAINT `UC_CATEGORY` UNIQUE (`NAME_CATEGORY`),
	CONSTRAINT `FK1_CATEGORY` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK2_CATEGORY` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK3_CATEGORY` FOREIGN KEY (`STATUS_ID`) REFERENCES `STATUS`(`STATUS_ID`)
	);

#CREATE TABLE CATEGORY_HIERARCHY
CREATE TABLE `CATEGORY_HIERARCHY`
	(
	`CATEGORY_HIERARCHY_ID` INT NOT NULL AUTO_INCREMENT,
	`PARENT_CATEGORY_ID` INT NOT NULL,
	`CHILD_CATEGORY_ID` INT NOT NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT `PK_CATEGORY_HIERARCHY` PRIMARY KEY (`CATEGORY_HIERARCHY_ID`),
	CONSTRAINT `UC_CATEGORY_HIERARCHY` UNIQUE (`PARENT_CATEGORY_ID`, `CHILD_CATEGORY_ID`),
	CONSTRAINT `FK1_CATEGORY_HIERARCHY` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK2_CATEGORY_HIERARCHY` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK3_CATEGORY_HIERARCHY` FOREIGN KEY (`PARENT_CATEGORY_ID`) REFERENCES `CATEGORY`(`CATEGORY_ID`),
	CONSTRAINT `FK4_CATEGORY_HIERARCHY` FOREIGN KEY (`CHILD_CATEGORY_ID`) REFERENCES `CATEGORY`(`CATEGORY_ID`)
	);

#CREATE TABLE BRAND
CREATE TABLE `BRAND`
	(
	`BRAND_ID` INT NOT NULL AUTO_INCREMENT,
	`NAME_BRAND` VARCHAR(100) NOT NULL,
	`STATUS_ID` INT NOT NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT `PK_BRAND` PRIMARY KEY (`BRAND_ID`),
	CONSTRAINT `UC_BRAND` UNIQUE (`NAME_BRAND`),
	CONSTRAINT `FK1_BRAND` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK2_BRAND` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK3_BRAND` FOREIGN KEY (`STATUS_ID`) REFERENCES `STATUS`(`STATUS_ID`)
	);

#CREATE TABLE SUPPLIER
CREATE TABLE `SUPPLIER`
	(
	`SUPPLIER_ID` INT NOT NULL AUTO_INCREMENT,
	`NAME_SUPPLIER` VARCHAR(100) NOT NULL,
	`STATUS_ID` INT NOT NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT `PK_SUPPLIER` PRIMARY KEY (`SUPPLIER_ID`),
	CONSTRAINT `UC_SUPPLIER` UNIQUE (`NAME_SUPPLIER`),
	CONSTRAINT `FK1_SUPPLIER` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK2_SUPPLIER` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK3_SUPPLIER` FOREIGN KEY (`STATUS_ID`) REFERENCES `STATUS`(`STATUS_ID`)
	);

#CREATE TABLE UNIT
CREATE TABLE `UNIT`
	(
	`UNIT_ID` INT NOT NULL AUTO_INCREMENT,
	`NAME_UNIT` VARCHAR(50) NOT NULL,
	`STATUS_ID` INT NOT NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT `PK_UNIT` PRIMARY KEY (`UNIT_ID`),
	CONSTRAINT `UC_UNIT` UNIQUE (`NAME_UNIT`),
	CONSTRAINT `FK1_UNIT` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK2_UNIT` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK3_UNIT` FOREIGN KEY (`STATUS_ID`) REFERENCES `STATUS`(`STATUS_ID`)
	);

#CREATE TABLE PRODUCT
CREATE TABLE `PRODUCT`
	(
	`PRODUCT_ID` INT NOT NULL AUTO_INCREMENT,
	`NAME_PRODUCT` VARCHAR(100) NOT NULL,
	`LOCATION_ID` INT NOT NULL,
	`CATEGORY_ID` INT NOT NULL,
	`BRAND_ID` INT NULL,
	`SUPPLIER_ID` INT NULL,
	`PRODUCT_QUANTITY` INT NOT NULL,
	`UNIT_ID` INT NOT NULL,
	`PRODUCT_DESCRIPTION` VARCHAR(200) NULL,
	`IP_ADDRESS` VARCHAR(15) NULL,
	`SERIAL_NUMBER` VARCHAR(50) NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`STATUS_ID` INT NOT NULL,
	CONSTRAINT `PK_PRODUCT` PRIMARY KEY (`PRODUCT_ID`),
	CONSTRAINT `UC_PRODUCT` UNIQUE (`NAME_PRODUCT`),
	CONSTRAINT `FK1_PRODUCT` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK2_PRODUCT` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK3_PRODUCT` FOREIGN KEY (`STATUS_ID`) REFERENCES `STATUS`(`STATUS_ID`),
	CONSTRAINT `FK4_PRODUCT` FOREIGN KEY (`LOCATION_ID`) REFERENCES `LOCATION`(`LOCATION_ID`),
	CONSTRAINT `FK5_PRODUCT` FOREIGN KEY (`CATEGORY_ID`) REFERENCES `CATEGORY`(`CATEGORY_ID`),
	CONSTRAINT `FK6_PRODUCT` FOREIGN KEY (`BRAND_ID`) REFERENCES `BRAND`(`BRAND_ID`),
	CONSTRAINT `FK7_PRODUCT` FOREIGN KEY (`SUPPLIER_ID`) REFERENCES `SUPPLIER`(`SUPPLIER_ID`),
	CONSTRAINT `FK8_PRODUCT` FOREIGN KEY (`UNIT_ID`) REFERENCES `UNIT`(`UNIT_ID`),
	CONSTRAINT CHK1_PRODUCT CHECK (IP_ADDRESS LIKE '%.%.%.%'),
	CONSTRAINT CHK2_PRODUCT CHECK (PRODUCT_QUANTITY >= 0)	  
	);

#CREATE TABLE PRODUCT_LABEL
CREATE TABLE `PRODUCT_LABEL`
	(
	`PRODUCT_LABEL_ID` INT NOT NULL AUTO_INCREMENT,
	`PRODUCT_ID` INT NOT NULL,
	`LABEL_ID` INT NOT NULL,
	`STATUS_ID` INT NOT NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	CONSTRAINT `PK_PRODUCT_LABEL` PRIMARY KEY (`PRODUCT_LABEL_ID`),
	CONSTRAINT `UC_STATUS` UNIQUE (`PRODUCT_ID`, `LABEL_ID`),
	CONSTRAINT `FK1_PRODUCT_LABEL` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK2_PRODUCT_LABEL` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK3_PRODUCT_LABEL` FOREIGN KEY (`STATUS_ID`) REFERENCES `STATUS`(`STATUS_ID`)
	);

#CREATE TABLE PRIVILEGES
CREATE TABLE `PRIVILEGE`
	(
    `PRIVILEGE_ID` INT NOT NULL AUTO_INCREMENT,
    `NAME_PRIVILEGE` VARCHAR(50) NOT NULL,
    `PRIVILEGE_DESCRIPTION` VARCHAR(2000) NULL,
    `STATUS_ID` INT NOT NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    CONSTRAINT `PK_PRIVILEGE` PRIMARY KEY (`PRIVILEGE_ID`),
    CONSTRAINT `UC_PRIVILEGE` UNIQUE (`NAME_PRIVILEGE`),
	CONSTRAINT `FK1_PRIVILEGE` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK2_PRIVILEGE` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
    CONSTRAINT `FK3_PRIVILEGE` FOREIGN KEY (`STATUS_ID`) REFERENCES `STATUS`(`STATUS_ID`)
    );

#CREATE TABLE USER_PRIVILEGE
CREATE TABLE `USER_PRIVILEGE`
	(
    `USER_PRIVILEGE_ID` INT NOT NULL AUTO_INCREMENT,
    `USER_ID` INT NOT NULL,
    `PRIVILEGE_ID` INT NOT NULL,
	`STATUS_ID` INT NOT NULL,
	`CREATED_USER_ID` INT NOT NULL,
	`CREATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
	`UPDATED_USER_ID` INT NOT NULL,
	`UPDATED_DATE` DATETIME NOT NULL DEFAULT CURRENT_TIMESTAMP(),
    CONSTRAINT `PK_USER_PRIVILEGE` PRIMARY KEY (`USER_PRIVILEGE_ID`),
    CONSTRAINT `UC_USER_PRIVILEGE` UNIQUE (`USER_ID`, `PRIVILEGE_ID`),
	CONSTRAINT `FK1_USER_PRIVILEGE` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK2_USER_PRIVILEGE` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`),
	CONSTRAINT `FK3_USER_PRIVILEGE` FOREIGN KEY (`STATUS_ID`) REFERENCES `STATUS`(`STATUS_ID`),
    CONSTRAINT `FK4_USER_PRIVILEGE` FOREIGN KEY (`USER_ID`) REFERENCES `USER`(`USER_ID`),
    CONSTRAINT `FK5_USER_PRIVILEGE` FOREIGN KEY (`PRIVILEGE_ID`) REFERENCES `PRIVILEGE`(`PRIVILEGE_ID`)
    );

#END TABLE CREATION
#BEGIN RESET OF ALL AUTO_INCREMENT VALUES

ALTER TABLE `BRAND` AUTO_INCREMENT = 1;
ALTER TABLE `CATEGORY` AUTO_INCREMENT = 1;
ALTER TABLE `CATEGORY_HIERARCHY` AUTO_INCREMENT = 1;
ALTER TABLE `LABEL` AUTO_INCREMENT = 1;
ALTER TABLE `LOCATION` AUTO_INCREMENT = 1;
ALTER TABLE `LOCATION_HIERARCHY` AUTO_INCREMENT = 1;
ALTER TABLE `LOCATION_TYPE` AUTO_INCREMENT = 1;
ALTER TABLE `PRIVILEGE` AUTO_INCREMENT = 1;
ALTER TABLE `PRODUCT` AUTO_INCREMENT = 1;
ALTER TABLE `PRODUCT_LABEL` AUTO_INCREMENT = 1;
ALTER TABLE `STATUS` AUTO_INCREMENT = 1;
ALTER TABLE `SUPPLIER` AUTO_INCREMENT = 1;
ALTER TABLE `UNIT` AUTO_INCREMENT = 1;
ALTER TABLE `USER` AUTO_INCREMENT = 1;
ALTER TABLE `USER_PRIVILEGE` AUTO_INCREMENT = 1;
ALTER TABLE `USER_TYPE` AUTO_INCREMENT = 1;

#END RESET OF ALL AUTO_INCREMENT VALUES
#BEGIN INITIAL DML

INSERT INTO `STATUS` (`NAME_STATUS`,`CREATED_USER_ID`,`CREATED_DATE`,`UPDATED_USER_ID`,`UPDATED_DATE`) VALUES ('active',1,CURRENT_TIMESTAMP(),1,CURRENT_TIMESTAMP());
INSERT INTO `STATUS` (`NAME_STATUS`,`CREATED_USER_ID`,`CREATED_DATE`,`UPDATED_USER_ID`,`UPDATED_DATE`) VALUES ('disabled',1,CURRENT_TIMESTAMP(),1,CURRENT_TIMESTAMP());
INSERT INTO `USER_TYPE` (`NAME_USER_TYPE`,`STATUS_ID`,`CREATED_USER_ID`,`CREATED_DATE`,`UPDATED_USER_ID`,`UPDATED_DATE`) VALUES ('admin',1,1,CURRENT_TIMESTAMP(),1,CURRENT_TIMESTAMP());
INSERT INTO `USER_TYPE` (`NAME_USER_TYPE`,`STATUS_ID`,`CREATED_USER_ID`,`CREATED_DATE`,`UPDATED_USER_ID`,`UPDATED_DATE`) VALUES ('user',1,1,CURRENT_TIMESTAMP(),1,CURRENT_TIMESTAMP());
INSERT INTO `USER` (`USER_EMAIL`,`USER_PASSWORD`,`NAME_USER`,`USER_TYPE_ID`,`STATUS_ID`,`CREATED_USER_ID`,`CREATED_DATE`,`UPDATED_USER_ID`,`UPDATED_DATE`) VALUES ('admin@admin.com','adm!n','admin',1,1,1,CURRENT_TIMESTAMP(),1,CURRENT_TIMESTAMP());
INSERT INTO `USER` (`USER_EMAIL`,`USER_PASSWORD`,`NAME_USER`,`USER_TYPE_ID`,`STATUS_ID`,`CREATED_USER_ID`,`CREATED_DATE`,`UPDATED_USER_ID`,`UPDATED_DATE`) VALUES ('user@user.com','us3r','user',1,1,1,CURRENT_TIMESTAMP(),1,CURRENT_TIMESTAMP());

#END INITIAL DML
#BEGIN TABLE ALTERATION

#ADD MISSING FOREIGN KEYS TO STATUS TABLE
ALTER TABLE `STATUS` ADD CONSTRAINT `FK1_STATUS` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`);
ALTER TABLE `STATUS` ADD CONSTRAINT `FK2_STATUS` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`);

#ADD MISSING FOREIGN KEYS TO USER_TYPE TABLE
ALTER TABLE `USER_TYPE` ADD CONSTRAINT `FK1_USER_TYPE` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`);
ALTER TABLE `USER_TYPE` ADD CONSTRAINT `FK2_USER_TYPE` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`);

#ADD MISSING FOREIGN KEYS TO USER TABLE
ALTER TABLE `USER` ADD CONSTRAINT `FK1_USER` FOREIGN KEY (`CREATED_USER_ID`) REFERENCES `USER`(`USER_ID`);
ALTER TABLE `USER` ADD CONSTRAINT `FK2_USER` FOREIGN KEY (`UPDATED_USER_ID`) REFERENCES `USER`(`USER_ID`);

#END TABLE ALTERATION
#BEGIN INDEX CREATION

#CREATE INDEXES ON STATUS TABLE
CREATE INDEX `IDX1_STATUS` ON `STATUS` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_STATUS` ON `STATUS` (`UPDATED_USER_ID`);

#CREATE INDEXES ON USER_TYPE TABLE
CREATE INDEX `IDX1_USER_TYPE` ON `USER_TYPE` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_USER_TYPE` ON `USER_TYPE` (`UPDATED_USER_ID`);
CREATE INDEX `IDX3_USER_TYPE` ON `USER_TYPE` (`STATUS_ID`);

#CREATE INDEXEX ON USER TABLE
CREATE INDEX `IDX1_USER` ON `USER` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_USER` ON `USER` (`UPDATED_USER_ID`);
CREATE INDEX `IDX3_USER` ON `USER` (`STATUS_ID`);

#CREATE INDEXEX ON LABEL TABLE
CREATE INDEX `IDX1_LABEL` ON `LABEL` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_LABEL` ON `LABEL` (`UPDATED_USER_ID`);
CREATE INDEX `IDX3_LABEL` ON `LABEL` (`STATUS_ID`);

#CREATE INDEXEX ON LOCATION_TYPE TABLE
CREATE INDEX `IDX1_LOCATION_TYPE` ON `LOCATION_TYPE` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_LOCATION_TYPE` ON `LOCATION_TYPE` (`UPDATED_USER_ID`);
CREATE INDEX `IDX3_LOCATION_TYPE` ON `LOCATION_TYPE` (`STATUS_ID`);

#CREATE INDEXEX ON LOCATION TABLE
CREATE INDEX `IDX1_LOCATION` ON `LOCATION` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_LOCATION` ON `LOCATION` (`UPDATED_USER_ID`);
CREATE INDEX `IDX3_LOCATION` ON `LOCATION` (`STATUS_ID`);

#CREATE INDEXEX ON LOCATION_HIERARCHY TABLE
CREATE INDEX `IDX1_LOCATION_HIERARCHY` ON `LOCATION_HIERARCHY` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_LOCATION_HIERARCHY` ON `LOCATION_HIERARCHY` (`UPDATED_USER_ID`);

#CREATE INDEXEX ON CATEGORY TABLE
CREATE INDEX `IDX1_CATEGORY` ON `CATEGORY` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_CATEGORY` ON `CATEGORY` (`UPDATED_USER_ID`);
CREATE INDEX `IDX3_CATEGORY` ON `CATEGORY` (`STATUS_ID`);

#CREATE INDEXEX ON CATEGORY_HIERARCHY TABLE
CREATE INDEX `IDX1_CATEGORY_HIERARCHY` ON `CATEGORY_HIERARCHY` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_CATEGORY_HIERARCHY` ON `CATEGORY_HIERARCHY` (`UPDATED_USER_ID`);

#CREATE INDEXEX ON BRAND TABLE
CREATE INDEX `IDX1_BRAND` ON `BRAND` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_BRAND` ON `BRAND` (`UPDATED_USER_ID`);
CREATE INDEX `IDX3_BRAND` ON `BRAND` (`STATUS_ID`);

#CREATE INDEXEX ON SUPPLIER TABLE
CREATE INDEX `IDX1_SUPPLIER` ON `SUPPLIER` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_SUPPLIER` ON `SUPPLIER` (`UPDATED_USER_ID`);
CREATE INDEX `IDX3_SUPPLIER` ON `SUPPLIER` (`STATUS_ID`);

#CREATE INDEXEX ON UNIT TABLE
CREATE INDEX `IDX1_UNIT` ON `UNIT` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_UNIT` ON `UNIT` (`UPDATED_USER_ID`);
CREATE INDEX `IDX3_UNIT` ON `UNIT` (`STATUS_ID`);

#CREATE INDEXEX ON PRODUCT TABLE
CREATE INDEX `IDX1_PRODUCT` ON `PRODUCT` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_PRODUCT` ON `PRODUCT` (`UPDATED_USER_ID`);
CREATE INDEX `IDX3_PRODUCT` ON `PRODUCT` (`STATUS_ID`);

#CREATE INDEXEX ON SUPPLIER TABLE
CREATE INDEX `IDX1_PRODUCT_LABEL` ON `PRODUCT_LABEL` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_PRODUCT_LABEL` ON `PRODUCT_LABEL` (`UPDATED_USER_ID`);
CREATE INDEX `IDX3_PRODUCT_LABEL` ON `PRODUCT_LABEL` (`STATUS_ID`);

#CREATE INDEXEX ON PRIVILEGE TABLE
CREATE INDEX `IDX1_PRIVILEGE` ON `PRIVILEGE` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_PRIVILEGE` ON `PRIVILEGE` (`UPDATED_USER_ID`);
CREATE INDEX `IDX3_PRIVILEGE` ON `PRIVILEGE` (`STATUS_ID`);

#CREATE INDEXEX ON USER_PRIVILEGE TABLE
CREATE INDEX `IDX1_USER_PRIVILEGE` ON `USER_PRIVILEGE` (`CREATED_USER_ID`);
CREATE INDEX `IDX2_USER_PRIVILEGE` ON `USER_PRIVILEGE` (`UPDATED_USER_ID`);
CREATE INDEX `IDX3_USER_PRIVILEGE` ON `USER_PRIVILEGE` (`STATUS_ID`);

#END INDEX CREATION
#BEGIN TRIGGER CREATION

#CREATE TRIGGERS ON STATUS TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_STATUS`
BEFORE INSERT ON `STATUS`  
FOR EACH ROW
BEGIN  
    SET NEW.`NAME_STATUS` = LOWER(NEW.`NAME_STATUS`);
    SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
    SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_STATUS`
BEFORE UPDATE ON `STATUS`
FOR EACH ROW
BEGIN
    SET NEW.`NAME_STATUS` = LOWER(NEW.`NAME_STATUS`);
    SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#CREATE TRIGGERS ON USER_TYPE TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_USER_TYPE`
BEFORE INSERT ON `USER_TYPE`  
FOR EACH ROW
BEGIN  
	SET NEW.`NAME_USER_TYPE` = LOWER(NEW.`NAME_USER_TYPE`);
	SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_USER_TYPE`
BEFORE UPDATE ON `USER_TYPE`
FOR EACH ROW
BEGIN
	SET NEW.`NAME_USER_TYPE` = LOWER(NEW.`NAME_USER_TYPE`);
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#CREATE TRIGGERS ON USER TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_USER`
BEFORE INSERT ON `USER`  
FOR EACH ROW
BEGIN  
	SET NEW.`NAME_USER` = LOWER(NEW.`NAME_USER`);
	SET NEW.`USER_EMAIL` = LOWER(NEW.`USER_EMAIL`);
	SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_USER`
BEFORE UPDATE ON `USER`
FOR EACH ROW
BEGIN
	SET NEW.`NAME_USER` = LOWER(NEW.`NAME_USER`);
	SET NEW.`USER_EMAIL` = LOWER(NEW.`USER_EMAIL`);
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#CREATE TRIGGERS ON LABEL TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_LABEL`
BEFORE INSERT ON `LABEL`  
FOR EACH ROW
BEGIN  
	SET NEW.`NAME_LABEL` = LOWER(NEW.`NAME_LABEL`);
	SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_LABEL`
BEFORE UPDATE ON `LABEL`
FOR EACH ROW
BEGIN
	SET NEW.`NAME_LABEL` = LOWER(NEW.`NAME_LABEL`);
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#CREATE TRIGGERS ON LOCATION_TYPE TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_LOCATION_TYPE`
BEFORE INSERT ON `LOCATION_TYPE`  
FOR EACH ROW
BEGIN  
	SET NEW.`NAME_LOCATION_TYPE` = LOWER(NEW.`NAME_LOCATION_TYPE`);
	SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_LOCATION_TYPE`
BEFORE UPDATE ON `LOCATION_TYPE`
FOR EACH ROW
BEGIN
	SET NEW.`NAME_LOCATION_TYPE` = LOWER(NEW.`NAME_LOCATION_TYPE`);
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#CREATE TRIGGERS ON LOCATION TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_LOCATION`
BEFORE INSERT ON `LOCATION`  
FOR EACH ROW
BEGIN  
	SET NEW.`NAME_LOCATION` = LOWER(NEW.`NAME_LOCATION`);
	SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_LOCATION`
BEFORE UPDATE ON `LOCATION`
FOR EACH ROW
BEGIN
	SET NEW.`NAME_LOCATION` = LOWER(NEW.`NAME_LOCATION`);
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#CREATE TRIGGERS ON LOCATION_HIERARCHY TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_LOCATION_HIERARCHY`
BEFORE INSERT ON `PRODUCT_LABEL`  
FOR EACH ROW
BEGIN  
	SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_LOCATION_HIERARCHY`
BEFORE UPDATE ON `LOCATION_HIERARCHY`
FOR EACH ROW
BEGIN
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#CREATE TRIGGERS ON CATEGORY TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_CATEGORY`
BEFORE INSERT ON `CATEGORY`  
FOR EACH ROW
BEGIN  
	SET NEW.`NAME_CATEGORY` = LOWER(NEW.`NAME_CATEGORY`);
	SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_CATEGORY`
BEFORE UPDATE ON `CATEGORY`
FOR EACH ROW
BEGIN
	SET NEW.`NAME_CATEGORY` = LOWER(NEW.`NAME_CATEGORY`);
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#CREATE TRIGGERS ON CATEGORY_HIERARCHY TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_CATEGORY_HIERARCHY`
BEFORE INSERT ON `CATEGORY_HIERARCHY`  
FOR EACH ROW
BEGIN  
	SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_CATEGORY_HIERARCHY`
BEFORE UPDATE ON `CATEGORY_HIERARCHY`
FOR EACH ROW
BEGIN
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#CREATE TRIGGERS ON BRAND TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_BRAND`
BEFORE INSERT ON `BRAND`  
FOR EACH ROW
BEGIN  
	SET NEW.`NAME_BRAND` = LOWER(NEW.`NAME_BRAND`);
	SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_BRAND`
BEFORE UPDATE ON `BRAND`
FOR EACH ROW
BEGIN
	SET NEW.`NAME_BRAND` = LOWER(NEW.`NAME_BRAND`);
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#CREATE TRIGGERS ON SUPPLIER TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_SUPPLIER`
BEFORE INSERT ON `SUPPLIER`  
FOR EACH ROW
BEGIN  
	SET NEW.`NAME_SUPPLIER` = LOWER(NEW.`NAME_SUPPLIER`);
	SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_SUPPLIER`
BEFORE UPDATE ON `SUPPLIER`
FOR EACH ROW
BEGIN
	SET NEW.`NAME_SUPPLIER` = LOWER(NEW.`NAME_SUPPLIER`);
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#CREATE TRIGGERS ON UNIT TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_UNIT`
BEFORE INSERT ON `UNIT`  
FOR EACH ROW
BEGIN  
	SET NEW.`NAME_UNIT` = LOWER(NEW.`NAME_UNIT`);
	SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_UNIT`
BEFORE UPDATE ON `UNIT`
FOR EACH ROW
BEGIN
	SET NEW.`NAME_UNIT` = LOWER(NEW.`NAME_UNIT`);
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#CREATE TRIGGERS ON PRODUCT TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_PRODUCT`
BEFORE INSERT ON `PRODUCT`  
FOR EACH ROW
BEGIN  
	SET NEW.`NAME_PRODUCT` = LOWER(NEW.`NAME_PRODUCT`);
	SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_PRODUCT`
BEFORE UPDATE ON `PRODUCT`
FOR EACH ROW
BEGIN
	SET NEW.`NAME_PRODUCT` = LOWER(NEW.`NAME_PRODUCT`);
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#CREATE TRIGGERS ON PRODUCT_LABEL TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_PRODUCT_LABEL`
BEFORE INSERT ON `PRODUCT_LABEL`
FOR EACH ROW
BEGIN
	SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_PRODUCT_LABEL`
BEFORE UPDATE ON `PRODUCT_LABEL`
FOR EACH ROW
BEGIN
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#CREATE TRIGGERS ON PRIVILEGE TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_PRIVILEGE`
BEFORE INSERT ON `PRIVILEGE`
FOR EACH ROW
BEGIN  
	SET NEW.`NAME_PRIVILEGE` = LOWER(NEW.`NAME_PRIVILEGE`);
	SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_PRIVILEGE`
BEFORE UPDATE ON `PRIVILEGE`
FOR EACH ROW
BEGIN
	SET NEW.`NAME_PRIVILEGE` = LOWER(NEW.`NAME_PRIVILEGE`);
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#CREATE TRIGGERS ON PRIVILEGE TABLE
DELIMITER $$
CREATE TRIGGER `TRG_PREINS_USER_PRIVILEGE`
BEFORE INSERT ON `USER_PRIVILEGE`
FOR EACH ROW
BEGIN 
	SET NEW.`CREATED_DATE` = CURRENT_TIMESTAMP;
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

DELIMITER $$
CREATE TRIGGER `TRG_PREUPD_USER_PRIVILEGE`
BEFORE UPDATE ON `USER_PRIVILEGE`
FOR EACH ROW
BEGIN
	SET NEW.`UPDATED_DATE` = CURRENT_TIMESTAMP;
END$$
DELIMITER ;

#END TRIGGER CREATION